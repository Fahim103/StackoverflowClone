@model StackOverflow.Web.Models.PostDetailsModel

@section styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" integrity="sha512-+4zCK9k+qNFUR5X+cKL9EIR+ZOhtIloNl9GIKS57V1MyNsYpYcUrUeQc9vNfzsWfV28IaLL3i96P9sdNyeRssA==" crossorigin="anonymous" />
}

@section scripts {
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script type="text/javascript">

        let postVoteBeforeAjax;
        let commentVoteBeforeAjax;
        let commentIdOfAjax;

        function UpvoteBegin() {
            postVoteBeforeAjax = $('#Points').text();
            @if (!User.Identity.IsAuthenticated)
            {
                @:alert("Please login to vote");
                @:return false;
            }
        }

        function UpvotePostSuccess(data) {
            if (data) {
                let id = data.Id.toString();
                let points = data.Points;
                let status = data.Status;
                $('#Points').text(points);
            }
        }

        function UpvotePostFailure(data) {
            @if (!User.Identity.IsAuthenticated)
            {
                @:alert('Please login to vote');
                @:$('#Points').text(postVoteBeforeAjax);
            }
            else
            {
                @:alert('Something went wrong');
                @:$('#Points').text(postVoteBeforeAjax);
            }
        }

        function DownvotePostSuccess(data) {
            if (data) {
                let id = data.Id.toString();
                let points = data.Points;
                let status = data.Status;
                $('#Points').text(points);
            }
        }

        function DownvotePostFailure(data) {
            @if(!User.Identity.IsAuthenticated)
            {
                @:alert('Please login to vote');
                @:$('#Points').text(postVoteBeforeAjax);
            }
            else
            {
                @:alert('Something went wrong');
                @:$('#Points').text(postVoteBeforeAjax);
            }
        }


        function OnCommentUpvoteBegin(data) {
            data = data.split(',');
            commentIdOfAjax = data[0];
            commentVoteBeforeAjax = data[1];
            @if (!User.Identity.IsAuthenticated)
            {
                @:alert("Please login to vote");
                @:return false;
            }
        }

        function UpvoteCommentSuccess(data) {
            if (data) {
                let id = data.Id.toString();
                let points = data.Points;
                let status = data.Status;
                $('#' + id).text(points);
            }
        }

        function UpvoteCommentFailure(data) {
            @if(!User.Identity.IsAuthenticated)
            {
                @:alert('Please login to vote');
                @:$('#' + commentIdOfAjax).text(commentVoteBeforeAjax);
            }
            else
            {
                @:alert('Something went wrong');
                @:$('#' + commentIdOfAjax).text(commentVoteBeforeAjax);
            }
        }

        function DownvoteCommentSuccess(data) {
            if (data) {
                let id = data.Id.toString();
                let points = data.Points;
                let status = data.Status;
                $('#' + id).text(points);
            }
        }

        function DownvoteCommentFailure(data) {
            @if(!User.Identity.IsAuthenticated)
            {
                @:alert('Please login to vote');
                @:$('#' + commentIdOfAjax).text(commentVoteBeforeAjax);
            }
            else
            {
                @:alert('Something went wrong');
                @:$('#' + commentIdOfAjax).text(commentVoteBeforeAjax);
            }
        }

    </script>
}

@{
    ViewBag.Title = "Details";
}

<div>
    <div class="row">
        <div class="col-md-12">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">@Html.ActionLink("Posts", "Index", "Post", routeValues: null, htmlAttributes: new { })</li>
                <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
            </ol>
        </div>
    </div>
</div>

<div class="mt-2">
    <div class="row">
        <div class="col-md-10">
            <h4>
                @Model.Title
                @if (Model.IsDuplicate)
                {
                    <span class="ml-2 btn-warning btn-sm rounded-pill">
                        Duplicate
                    </span>
                }
            </h4>
            <small>
                Asked By @Model.AskedBy
            </small>
            <br />
            <small>@Model.CreatedAt</small>
        </div>
    </div>
    <hr>
    <div class="row">
        <div class="col-md-1 text-center">
            <div>
                @using (Ajax.BeginForm("Upvote", "Post", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "Points", OnBegin="return UpvoteBegin()",  OnSuccess = "UpvotePostSuccess", OnFailure = "UpvotePostFailure" }))
                {
                    <input type="hidden" value=@Model.Id name="id" />
                    <button type="submit" style="border: none; background-color: white;">
                        <span>
                            <i class="fa fa-lg fa-angle-up" aria-hidden="true"></i>
                        </span>
                    </button>
                }
                <span id="Points" name="TotalVotes">@Model.TotalVotes</span>
                @using (Ajax.BeginForm("Downvote", "Post", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "Points", OnBegin = "return UpvoteBegin()", OnSuccess = "DownvotePostSuccess", OnFailure = "DownvotePostFailure" }))
                {
                    <input type="hidden" value="@Model.Id" name="id" />
                    <button type="submit" style="border: none; background-color: white;">
                        <span>
                            <i class="fa fa-lg fa-angle-down" aria-hidden="true"></i>
                        </span>
                    </button>
                }
            </div>
        </div>
        <div class="col-md-10">
            <p>
                @Model.Content
            </p>
        </div>
    </div>

    @if(Model.CommentDetails.Count > 0)
    {
        <hr />
        <h5>Answers</h5>
    }

    @foreach (var item in Model.CommentDetails)
    {
        <hr />
        <div class="row">
            <div class="col-md-1 text-center">
                <div>
                    @using (Ajax.BeginForm("Upvote", "Comment", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = item.Id.ToString(), OnSuccess = "UpvoteCommentSuccess", OnFailure = "UpvoteCommentFailure", OnBegin = "return OnCommentUpvoteBegin('" + item.Id + "," + item.CommentPoints + "')" }))
                    {
                        <input type="hidden" value=@item.Id name="id" />
                        <button style="border: none; background-color: white;">
                            <span>
                                <i class="fa fa-lg fa-angle-up" aria-hidden="true"></i>
                            </span>
                        </button>
                    }
                    <span id="@item.Id" name="CommentPoints">@item.CommentPoints</span>
                    @using (Ajax.BeginForm("Downvote", "Comment", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = item.Id.ToString(), OnSuccess = "DownvoteCommentSuccess", OnFailure = "DownvoteCommentFailure", OnBegin = "return OnCommentUpvoteBegin('" + item.Id + "," + item.CommentPoints + "')" }))
                    {
                        <input type="hidden" value=@item.Id name="id" />
                        <button type="submit" style="border: none; background-color: white;">
                            <span>
                                <i class="fa fa-lg fa-angle-down" aria-hidden="true"></i>
                            </span>
                        </button>
                    }
                </div>
                <div>
                    @if (item.IsAccepted)
                    {
                        @:<span><i class="fa fa-lg fa-check" aria-hidden="true" style="color:green"></i></span>
                    }
                </div>
            </div>
            <div class="col-md-10">
                <p>
                    @item.Content
                </p>
            </div>
            @if (!Model.HasAcceptedAnswer && User.Identity.Name.Equals(Model.AskedBy))
            {
                <div class="offset-1 col-md-4 answer-accept">
                    @using (Html.BeginForm("AcceptAnswer", "Post", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken();
                        <input type="hidden" name="CommentId" value=@item.Id />
                        <input type="hidden" name="PostId" value=@Model.Id />
                        <div>
                            <button type="submit" class="btn btn-sm btn-success">
                                Accept
                            </button>
                        </div>
                    }
                </div>
                <div class="col-md-6 text-right">
                    <div class="px-5">
                        <small>
                            <span>Replied at @item.CreatedAt.ToLocalTime()</span>
                            <br>
                            <span>By @item.AnsweredBy</span>
                        </small>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-12 text-right">
                    <div class="px-5">
                        <small>
                            <span>Replied at @item.CreatedAt.ToLocalTime()</span>
                            <br>
                            <span>By @item.AnsweredBy</span>
                        </small>
                    </div>
                </div>
            }
        </div>
    }

    @if (Request.IsAuthenticated)
    {
        <div class="row mt-3">
            <div class="offset-1 col-md-10">
                @using (Html.BeginForm("AddComment", "Comment", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label for="commentAnswer"><strong>Your Answer</strong></label>
                        <textarea class="form-control" id="commentAnswer" rows="5" style="width:100%" name="Content"></textarea>
                    </div>
                    <input type="hidden" name="PostId" value=@Model.Id />
                    <button type="submit" class="btn btn-primary">Post Your Answer</button>
                }
            </div>
        </div>
    }
</div>